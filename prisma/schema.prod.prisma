// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Competition {
  id                    String        @id @default(cuid())
  name                  String        @unique
  season                String
  timezone              String        @default("Europe/London")
  startDate             DateTime
  endDate               DateTime?
  lockPolicy            String        @default("FIRST_GW_KICKOFF")
  resultPolicy          String        @default("DRAW_ELIM_LOSS_ELIM")
  livesPerRound         Int           @default(1)
  inviteCode            String        @unique
  isActive              Boolean       @default(true)
  seasonChampionEntryId String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  rounds                Round[]
  entries               Entry[]
  gameweeks             Gameweek[]
  
  seasonChampion        Entry?        @relation("SeasonChampion", fields: [seasonChampionEntryId], references: [id])
}

model Round {
  id              String       @id @default(cuid())
  competitionId   String
  roundNumber     Int
  winnerEntryId   String?
  endedAt         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  competition     Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  entries         Entry[]
  winner          Entry?       @relation("RoundWinner", fields: [winnerEntryId], references: [id])
  
  @@unique([competitionId, roundNumber])
}

model Entry {
  id                    String       @id @default(cuid())
  userId                String
  competitionId         String
  roundId               String?
  livesRemaining        Int          @default(1)
  eliminatedAtGw        Int?
  seasonRoundWins       Int          @default(0)
  seasonGwsSurvived     Int          @default(0)
  seasonMissedPicks     Int          @default(0)
  firstRoundWinAt       DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition           Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  round                 Round?       @relation(fields: [roundId], references: [id], onDelete: Cascade)
  picks                 Pick[]
  wonRounds             Round[]      @relation("RoundWinner")
  seasonChampionOf      Competition[] @relation("SeasonChampion")
  
  @@unique([userId, competitionId, roundId])
}

model Gameweek {
  id            String    @id @default(cuid())
  competitionId String
  gameweekNumber Int
  lockTime      DateTime
  isSettled     Boolean   @default(false)
  settledAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  fixtures      Fixture[]
  picks         Pick[]
  
  @@unique([competitionId, gameweekNumber])
}

model Fixture {
  id            String        @id @default(cuid())
  gameweekId    String
  homeTeam      String
  awayTeam      String
  kickoff       DateTime
  homeGoals     Int?
  awayGoals     Int?
  status        String        @default("SCHEDULED")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  gameweek      Gameweek      @relation(fields: [gameweekId], references: [id], onDelete: Cascade)
  picks         Pick[]
}

model Pick {
  id         String   @id @default(cuid())
  entryId    String
  gameweekId String
  fixtureId  String
  team       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  entry      Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id], onDelete: Cascade)
  fixture    Fixture  @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
  
  @@unique([entryId, gameweekId])
}
